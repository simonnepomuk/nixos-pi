name: nix-build-on-demand-docker
on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Type of the build'
        required: true
        default: 'worker'
      user: 
        description: 'User to use for the build'
        required: true
        default: 'worker'
      password:
        description: 'Password to use for the build'
        required: true
        default: 'worker'
      ssh_pubkey:
        description: 'SSH public key to use for the build'
        required: true
        default: 'worker'
      ssid:
        description: 'SSID to use for the build'
        required: true
        default: 'worker'
      ssid_password:
        description: 'SSID password to use for the build'
        required: true
        default: 'worker'
      hostname:
        description: 'Hostname to use for the build'
        required: true
        default: 'worker'
      control_node_ip:
        description: 'Control node IP'
        required: true
        default: 'worker'
      k3s_token:
        description: 'K3s token'
        required: true
        default: 'worker'
      
      
jobs:
  build-custom-image:
    if: ${{ github.event.inputs.type == 'worker' || github.event.inputs.type == 'control' }}
    name: Build custom image
    runs-on: ubuntu-22.04
    env:
      NIXOS_USER: ${{ github.event.inputs.user }}
      NIXOS_PASSWORD: ${{ github.event.inputs.password }}
      NIXOS_SSH_PUBKEY: ${{ github.event.inputs.ssh_pubkey }}
      NIXOS_SSID: ${{ github.event.inputs.ssid }}
      NIXOS_SSID_PASSWORD: ${{ github.event.inputs.ssid_password }}
      NIXOS_HOSTNAME: ${{ github.event.inputs.hostname }}
      CONTROL_NODE_IP: ${{ github.event.inputs.CONTROL_NODE_IP }}
      K3S_TOKEN: ${{ github.event.inputs.k3s_token }}
    steps:
    - uses: actions/checkout@v4.1.1
    - uses: cachix/install-nix-action@v26
      with:
        nix_path: nixos=channel:nixos-23.05
        extra_nix_config: |
          extra-platforms = aarch64-linux
    - name: Check nix.conf
      run: cat /etc/nix/nix.conf
    - name: Register binfmt
      run: |
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - name: Test binfmt availability
      run: |
        cat /proc/sys/fs/binfmt_misc/qemu-aarch64
    - name: Build SD Image
      run: |
        nix build .#nixosConfigurations.raspberry-pi_3_${{ github.event.inputs.type }}.config.system.build.sdImage
    - uses: actions/upload-artifact@v4
      with:
        name: sd-image.img
        path: ./result/sd-image/*.img*